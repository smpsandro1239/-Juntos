# +JUNTOS - CI/CD Pipeline
# Ficheiro: .github/workflows/ci-cd.yml
# Descrição: Pipeline completo de CI/CD para todas as aplicações
# Autor: (+JUNTOS team)
# Locale: pt_PT

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ${{ github.repository }}/backend
  ADMIN_IMAGE: ${{ github.repository }}/admin

jobs:
  # ===========================================
  # BACKEND - Kotlin Spring Boot
  # ===========================================
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:15-3.4
        env:
          POSTGRES_DB: juntos_test
          POSTGRES_USER: juntos_user
          POSTGRES_PASSWORD: juntos_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./backend/service-core/gradlew

      - name: Run tests
        working-directory: ./backend/service-core
        run: ./gradlew test jacocoTestReport --no-daemon

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/service-core/build/reports/jacoco/test/jacocoTestReport.xml
          flags: backend
          name: backend-coverage

  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    needs: backend-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build application
        working-directory: ./backend/service-core
        run: ./gradlew build --no-daemon

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest ./backend/service-core
          docker build -t ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }} ./backend/service-core

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker images
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}

  # ===========================================
  # ADMIN - React TypeScript
  # ===========================================
  admin-test:
    name: Admin Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: apps/admin/package-lock.json

      - name: Install dependencies
        working-directory: ./apps/admin
        run: npm ci

      - name: Run linter
        working-directory: ./apps/admin
        run: npm run lint

      - name: Run tests
        working-directory: ./apps/admin
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/admin/coverage/lcov.info
          flags: admin
          name: admin-coverage

  admin-build:
    name: Admin Build
    runs-on: ubuntu-latest
    needs: admin-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: apps/admin/package-lock.json

      - name: Install dependencies
        working-directory: ./apps/admin
        run: npm ci

      - name: Build application
        working-directory: ./apps/admin
        run: npm run build

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.ADMIN_IMAGE }}:latest ./apps/admin
          docker build -t ${{ env.REGISTRY }}/${{ env.ADMIN_IMAGE }}:${{ github.sha }} ./apps/admin

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker images
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.ADMIN_IMAGE }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.ADMIN_IMAGE }}:${{ github.sha }}

  # ===========================================
  # MOBILE - Flutter
  # ===========================================
  mobile-test:
    name: Mobile Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.19.0"
          channel: "stable"

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Install dependencies
        working-directory: ./apps/mobile
        run: flutter pub get

      - name: Run analyzer
        working-directory: ./apps/mobile
        run: flutter analyze

      - name: Run tests
        working-directory: ./apps/mobile
        run: flutter test --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/mobile/coverage/lcov.info
          flags: mobile
          name: mobile-coverage

  mobile-build:
    name: Mobile Build
    runs-on: ubuntu-latest
    needs: mobile-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.19.0"
          channel: "stable"

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Install dependencies
        working-directory: ./apps/mobile
        run: flutter pub get

      - name: Build APK
        working-directory: ./apps/mobile
        run: flutter build apk --flavor dev

      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: mobile-apk
          path: ./apps/mobile/build/app/outputs/flutter-apk/app-dev-release.apk

  # ===========================================
  # DEPLOYMENT
  # ===========================================
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-build, admin-build, mobile-build]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to GCP
        run: |
          echo "Deployment logic here"
          echo "This would trigger Terraform apply or Kubernetes deployment"
        # TODO: Implement actual deployment logic

  # ===========================================
  # SECURITY SCANNING
  # ===========================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
