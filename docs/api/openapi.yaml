
# +JUNTOS
# Ficheiro: docs/api/openapi.yaml
# Descrição: Especificação da API v1
# Autor: (+JUNTOS team)
# Locale: pt_PT

openapi: 3.1.0
info:
  title: +JUNTOS API
  version: v1
  description: API para a plataforma +JUNTOS.
  contact:
    name: +JUNTOS Team
    email: tech@juntos.pt
servers:
  - url: http://localhost:8080/v1
    description: Servidor de Desenvolvimento
  - url: https://api.juntos.pt/v1
    description: Servidor de Produção

paths:
  /pois:
    get:
      summary: Lista todos os Pontos de Interesse (POIs)
      operationId: getAllPois
      tags:
        - POIs
      responses:
        '200':
          description: Uma lista de POIs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Poi'
    post:
      summary: Cria um novo Ponto de Interesse
      operationId: createPoi
      tags:
        - POIs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoiInput'
      responses:
        '201':
          description: POI criado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Poi'

  /pois/{id}:
    get:
      summary: Obtém um POI pelo seu ID
      operationId: getPoiById
      tags:
        - POIs
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: O POI solicitado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Poi'
        '404':
          description: POI não encontrado.

components:
  schemas:
    Poi:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        address:
          type: string
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string
        website:
          type: string
        phone:
          type: string
        price:
          type: number
          format: double
        minAge:
          type: integer
        maxAge:
          type: integer
        indoor:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PoiInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double

  /events:
    get:
      summary: Lista todos os Eventos
      operationId: getAllEvents
      tags:
        - Eventos
      responses:
        '200':
          description: Uma lista de Eventos.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      summary: Cria um novo Evento
      operationId: createEvent
      tags:
        - Eventos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInput'
      responses:
        '201':
          description: Evento criado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

  /events/{id}:
    get:
      summary: Obtém um Evento pelo seu ID
      operationId: getEventById
      tags:
        - Eventos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: O Evento solicitado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Evento não encontrado.

  /subscriptions/subscribe:
    post:
      summary: Cria uma sessão de checkout para subscrição
      operationId: subscribe
      tags:
        - Subscrições
      responses:
        '200':
          description: URL de checkout do Stripe.
          content:
            application/json:
              schema:
                type: object
                properties:
                  checkout_url:
                    type: string
                    format: url

  /webhooks/stripe:
    post:
      summary: Webhook para eventos do Stripe
      operationId: handleStripeWebhook
      tags:
        - Webhooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Webhook recebido com sucesso.

components:
  schemas:
    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        poiId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        price:
          type: number
          format: double
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    EventInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        poiId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        price:
          type: number
          format: double

  /albums:
    get:
      summary: Lista todos os Albuns
      operationId: getAllAlbums
      tags:
        - Albuns
      responses:
        '200':
          description: Uma lista de Albuns.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
    post:
      summary: Cria um novo Album
      operationId: createAlbum
      tags:
        - Albuns
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlbumInput'
      responses:
        '201':
          description: Album criado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'

  /albums/{id}:
    get:
      summary: Obtém um Album pelo seu ID
      operationId: getAlbumById
      tags:
        - Albuns
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: O Album solicitado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '404':
          description: Album não encontrado.

components:
  schemas:
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        coverImageUrl:
          type: string
          format: url
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AlbumInput:
      type: object
      properties:
        title:
          type: string
        description:
          type: string

  securitySchemes:
    firebaseAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - firebaseAuth: []
